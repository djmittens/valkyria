; This is the beginning of my fun.
; Default program to be parsed and loaded
(print "Hello and welcome to the prelude n Shit")

; Function Definitions
(def {fun} (\ {f b}  {
   def (head f) (\ (tail f) b)
}))

;(error "And this is an error n stuff")
; Atoms
(def {nil} {})
(def {true} 1)
(def {false} 0)
 
; unpack list for a function

(fun {unpack f l} {
     eval (join (list f) l)
})
(def {curry} unpack)

; Pack the list for a function
; eg for a function  f, pack (f 1 2 3) into {f { 1 2 3}}
(fun {pack f & xs} {f xs})
(def {uncurry} pack)

; Perform several things in sequence, and return the last result
(fun {do & l} {
     if (== l nil)
       {nil}
       {last l}
})

; Open a new scope
(fun {let  b} {
   ((\ {_} b) ())
})

; list functions and shit
; LISTS ARE 1 BASED LIKE LUA, CAUSE FUCK YEAH

; Return first item in the list
(fun {fst _l} {eval (head _l) })

; Return the second item in the list
(fun {snd _y} {eval (head (tail _y)) })

; Return the third item in the list
(fun {trd l} {eval (head (tail (tail l))) })

; length of the list (there is a builtin for that??)
; i need to draw a line here, the builtin would be way more performant
; and its not something  that can be native, as sexpr and stuff is also a list
; (fun {len l} {
;      if (== l nil)
;        {0}
;        {+ 1 (len (tail l))}
; })

; Nth item in the list
; perhaps builtin for this would not be bad either
; LISTS ARE 1 BASED LIKE LUA, CAUSE FUCK YEAH
; TODO(main): why the hell does calling this variable simply l reak this function?
(fun {nth n _l} {
    select
       ; TODO(main): Errors dont support format strings yet
      { (<= n 0) (error "Invalid array index (should start with 1)" ) }
      { (== n 1) (fst _l) }
      { otherwise (nth (- n 1) (tail _l)) }
})

;last item in the list
(fun {last l} {nth (len l) l})

; Take N items from the front of the list
(fun { take n l} {
     if (== n 0)
      {nil}
      {join (head l) (take (- n 1) (tail l))}
})

; Drop N items from the front of the list
(fun {drop n l} {
     if (== n 0)
     {l}
     {drop (- n 1) (tail l)}
})

; Split a list at N forming two other lists as sublist
; valkyria> split 4 {1 2 3 4 5 6 7 8}
; Qexpr{ Qexpr{ Num[1] Num[2] Num[3] Num[4] } Qexpr{ Num[5] Num[6] Num[7] Num[8] } }
; {{1 2 3 4} {5 6 7 8}}
(fun {split n l} { 
     list (take n l) (drop n l)
})

; true if value exists inside of a list
; 1 BASED it starts with 1, its an index !!!
(fun {exists x l} {
     if(== l nil)
      {false}
      {if (== x (fst l)) { true } {exists x (tail l)}}
})

; Apply a function to List
(fun {map f l} {
     if(== l nil)
      {nil}
      {join (list (f (fst l))) (map f (tail l))}
})

; Filter the list n stuff
(fun {filter f l} {
     if(== l nil)
       {nil}
       {join (if (f (fst l)) {head l} {nil}) (filter f (tail l))}
})

; fold left or something
(fun {foldl f z l} {
     if (== l nil)
      {z}
      {foldl f (f z (fst l)) (tail  l)}
})

; Returns the sum of the list
(fun {sum l} {foldl + 0 l})
(fun {product l} {foldl * 1 l})

; Logics

; Logical negation
(fun {not x} {- 1 x})

; x or y 
(fun {or x y} {+ x y})

; x and y
(fun {and x y} {* x y})

; Function functions, you know that lambda shit

; TODO(main): there is a bug where partial application doesnt work
; definitely need to look into that.  Also the error message is fucked too
; valkyria> flip def
; > 
;   regex 
;   expr|symbol|regex:1:1 'flip'
;   expr|symbol|regex:1:6 'def'
;   regex 
; AST: Sexpr( Sym[flip] Sym[def] )
; Result: Error[LEnv: Symbol `(null)` is not ]
; Flip arguments of a function that  takes 2
(fun {flip f a b} {f b a})

; Compose two functions such that (comp f g) == f(g(_))
(fun {comp f g x} {f (g x)})

; Coniditionals

; Basically a switch statement but allows you to specify your conditions
;(fun {fib n} {
; select
;     { (== n 0) 0 }
;     { (== n 1) 1 }
;     { otherwise (+ (fib (- n 1)) (fib (- n 2))) }
; })
(fun {select & cs} {
     if (== cs nil)
       {error "No selection found"}
       {if (fst (fst cs)) {snd (fst cs)} {unpack select (tail cs)}}
})

; This is a default case and stuff, i guess its useful, just an alias to true tho
(def  {otherwise} true)

; Convenient way to match on some shit instead of a select, to match on specific value
(fun {case x & cs} {
     if (== cs nil)
      {error "No case found"}
      { if (== x (fst (fst  cs)) ) 
          {snd (fst cs)} 
          {
            unpack case (join (list x) (tail cs))
          }
      }
})
